<context>
# Overview  
The UFC Analytics Platform is a full-stack web application that leverages machine learning to provide sophisticated fight analytics for UFC fans, analysts, and sports betting enthusiasts. The platform addresses the lack of advanced analytical tools in the MMA space by offering interactive predictions, historical analysis, and performance insights through three core products.

# Core Features  

## 1. Interactive Fight Outcome Predictor
- **What it does:** Real-time ML predictions with adjustable fighter parameters via interactive sliders
- **Why it's important:** Allows users to explore "what-if" scenarios and understand which attributes most impact fight outcomes
- **How it works:** XGBoost/Random Forest models process user-adjusted parameters (height, weight, reach, age, experience, striking accuracy) to predict win probability and method (KO/TKO, Submission, Decision)

## 2. Style Evolution Timeline Analyzer
- **What it does:** Visualizes how fighting styles and finish rates have evolved throughout UFC history
- **Why it's important:** Provides insights into meta-game evolution and effectiveness of different techniques over time
- **How it works:** Time series analysis and clustering algorithms process historical fight data to identify trends by weight class, era, and fighting style

## 3. Fighter Endurance & Pacing Dashboard
- **What it does:** Analyzes round-by-round performance degradation and predicts cardio performance
- **Why it's important:** Critical for understanding fighter stamina patterns and predicting late-round performance
- **How it works:** Survival analysis and time series models predict performance degradation based on fighting style, age, and historical patterns

# User Experience  

## User Personas
1. **UFC Fans:** Want deeper insights into upcoming fights
2. **Sports Analysts:** Need data-driven content for analysis
3. **Betting Enthusiasts:** Require predictive analytics for informed decisions
4. **MMA Trainers/Coaches:** Seek performance patterns and strategic insights

## Key User Flows
1. Predict upcoming fight → Adjust fighter parameters → View probability changes → Compare to historical fights
2. Select weight class → View style evolution timeline → Filter by era → Analyze trend details
3. Select fighter → View endurance profile → Compare rounds → Predict performance in hypothetical 5-round fight

## UI/UX Considerations
- Mobile-responsive design for event-night usage
- Real-time updates without page refreshes
- Intuitive slider controls with visual feedback
- Clean data visualizations with hover tooltips
- Dark mode for late-night viewing
</context>
<PRD>
# Technical Architecture  

## System Components

### Backend Architecture
- **API Framework:** FastAPI 0.104.1 (async Python web framework)
- **Database:** PostgreSQL 13+ with SQLAlchemy 2.0 ORM
- **Caching:** Redis for API response caching
- **Task Queue:** Celery with Redis broker for background ML model training
- **Web Server:** Uvicorn ASGI server
- **Process Manager:** Gunicorn for production deployment

### Frontend Architecture
- **Framework:** React 18 with TypeScript 4.9+
- **Build Tool:** Vite for fast HMR and optimized builds
- **State Management:** React Context API + useReducer for global state
- **Routing:** React Router v6
- **HTTP Client:** Axios with interceptors for error handling
- **Styling:** Tailwind CSS 3.0 with custom component library
- **Charts:** Recharts for standard visualizations, D3.js for custom interactive graphics
- **Testing:** Jest + React Testing Library

### ML Pipeline
- **Training Framework:** scikit-learn 1.3+, XGBoost 2.0
- **Feature Engineering:** pandas 2.0, numpy 1.24
- **Model Versioning:** MLflow for experiment tracking
- **Model Serving:** FastAPI endpoints with Pydantic validation
- **Data Processing:** Apache Spark for large-scale historical processing (optional)

### Data Pipeline
- **Web Scraping:** Beautiful Soup 4 + Scrapy for UFCStats.com
- **Data Validation:** Great Expectations for data quality checks
- **ETL Pipeline:** Apache Airflow for orchestration
- **Data Storage:** PostgreSQL with partitioning for time-series data

## Data Models

### Core Entities
```python
Fighter:
  - id: UUID
  - name: str
  - physical_attributes: {height_cm, weight_lbs, reach_inches, stance}
  - birth_date: date
  - career_stats: {wins, losses, draws, no_contests}

Fight:
  - id: UUID
  - event_id: UUID
  - fighters: {fighter_a_id, fighter_b_id}
  - result: {winner_id, method, round, time}
  - weight_class: str
  - is_title_fight: bool

FightStats:
  - fight_id: UUID
  - fighter_id: UUID
  - round_stats: [{round_number, strikes_landed, strikes_attempted, takedowns, control_time}]
  - totals: {total_strikes, total_takedowns, total_control_time}

Event:
  - id: UUID
  - name: str
  - date: datetime
  - location: {city, country, venue}
```

## APIs and Integrations

### RESTful API Endpoints
```
GET /api/v1/predictions/simulate
  - Body: {fighter_a_attrs, fighter_b_attrs}
  - Response: {win_probability, method_probabilities, similar_fights}

GET /api/v1/analytics/style-evolution
  - Query: {weight_class?, start_date?, end_date?}
  - Response: {timeline_data, trend_analysis}

GET /api/v1/fighters/{id}/endurance
  - Response: {round_performance, degradation_rate, predictions}

GET /api/v1/fights/historical
  - Query: {filters, pagination}
  - Response: {fights, metadata}
```

### External Integrations
- **UFCStats.com:** Daily scraping via scheduled jobs
- **Supabase:** Managed PostgreSQL for production deployment
- **Vercel/Netlify:** Frontend hosting with CDN
- **Railway/Render:** Backend API hosting

## Infrastructure Requirements

### Development Environment
- Docker Compose for local PostgreSQL and Redis
- Python 3.11+ virtual environment
- Node.js 18+ for frontend tooling
- Git for version control

### Production Environment
- **Compute:** 2+ vCPUs, 4GB RAM minimum for API server
- **Database:** PostgreSQL with 10GB+ storage, read replicas for scaling
- **Caching:** Redis instance with 1GB memory
- **CDN:** CloudFlare for static assets
- **Monitoring:** Sentry for error tracking, Prometheus/Grafana for metrics
- **CI/CD:** GitHub Actions for automated testing and deployment

# Development Roadmap  

## Phase 1: Foundation & Data Pipeline (MVP)
1. **Database Setup**
   - Design and implement PostgreSQL schema
   - Set up SQLAlchemy models and migrations
   - Create seed data scripts

2. **Data Acquisition**
   - Build UFCStats.com scraper
   - Implement data validation pipeline
   - Create ETL process for historical data import
   - Set up automated daily updates

3. **Basic API Framework**
   - Initialize FastAPI project structure
   - Implement CORS and basic middleware
   - Create health check and documentation endpoints
   - Set up error handling and logging

## Phase 2: ML Models & Core Predictions
1. **Feature Engineering Pipeline**
   - Calculate fighter differentials (reach, height, age advantages)
   - Compute rolling performance metrics
   - Generate fight style classifications

2. **Prediction Models**
   - Train XGBoost binary classifier for win/loss
   - Implement multi-class model for fight outcome methods
   - Create model evaluation and backtesting framework
   - Build model serving endpoints with caching

3. **API Development**
   - Implement prediction endpoints with parameter validation
   - Add similar fights retrieval logic
   - Create batch prediction capabilities

## Phase 3: Frontend Foundation & Fight Predictor
1. **React Application Setup**
   - Initialize React + TypeScript with Vite
   - Configure Tailwind CSS and component library
   - Set up routing and global state management
   - Implement responsive layout structure

2. **Interactive Fight Predictor UI**
   - Build slider components with real-time updates
   - Create probability visualization components
   - Implement fighter selection interface
   - Add historical fight comparison display

3. **API Integration**
   - Set up Axios client with interceptors
   - Implement real-time prediction updates
   - Add loading states and error handling
   - Create data caching layer

## Phase 4: Analytics Features
1. **Style Evolution Timeline**
   - Implement time series data processing
   - Build D3.js timeline visualization
   - Create filtering and drill-down capabilities
   - Add trend analysis overlays

2. **Fighter Endurance Dashboard**
   - Process round-by-round statistics
   - Build performance degradation models
   - Create round comparison visualizations
   - Implement cardio prediction algorithms

## Phase 5: Production Readiness
1. **Performance Optimization**
   - Implement database indexing and query optimization
   - Add Redis caching for frequent queries
   - Optimize frontend bundle size
   - Implement lazy loading and code splitting

2. **Testing & Quality**
   - Write comprehensive unit tests (80%+ coverage)
   - Add integration tests for critical paths
   - Implement E2E tests for user flows
   - Set up performance monitoring

3. **Deployment & DevOps**
   - Configure Docker containers
   - Set up CI/CD pipelines
   - Implement blue-green deployment
   - Configure monitoring and alerting

## Future Enhancements (Post-MVP)
- Live fight tracking with real-time predictions
- User accounts with saved predictions and custom models
- Social features for sharing predictions
- Advanced betting analytics and bankroll management
- Fighter comparison tools with head-to-head analysis
- Training camp and injury impact analysis
- Judge scoring prediction models

# Logical Dependency Chain

## Foundation (Must be built first)
1. PostgreSQL database with core schema
2. Data scraping and ETL pipeline (need data before ML)
3. Basic FastAPI structure with health checks

## Core Backend (Enables frontend)
1. SQLAlchemy models and database queries
2. Feature engineering pipeline (required for ML)
3. ML model training and serialization
4. Prediction API endpoints

## Initial Frontend (Minimum viable product)
1. React app structure with routing
2. Fight predictor interface (most valuable feature)
3. API integration layer
4. Basic responsive design

## Advanced Features (Build iteratively)
1. Style evolution (after historical data processed)
2. Endurance analysis (requires round-by-round stats)
3. Caching layer (after identifying bottlenecks)
4. Advanced visualizations (after core features stable)

# Risks and Mitigations  

## Technical Challenges

### 1. Data Quality & Availability
**Risk:** UFCStats.com structure changes or rate limiting
**Mitigation:** 
- Implement robust error handling and retry logic
- Build data validation pipeline with Great Expectations
- Create manual data entry interface as backup
- Cache historical data locally

### 2. Model Accuracy & Drift
**Risk:** Prediction models become less accurate over time
**Mitigation:**
- Implement automated model retraining pipeline
- Set up model performance monitoring
- A/B test new models before full deployment
- Maintain model versioning with rollback capability

### 3. Real-time Performance
**Risk:** Slow predictions with multiple concurrent users
**Mitigation:**
- Implement Redis caching for common predictions
- Use database connection pooling
- Add horizontal scaling capability
- Optimize database queries with proper indexing

### 4. Frontend Performance
**Risk:** Slow rendering with complex visualizations
**Mitigation:**
- Use React.memo and useMemo for optimization
- Implement virtual scrolling for large lists
- Lazy load visualization libraries
- Use WebWorkers for heavy computations

## MVP Scoping Challenges

### 1. Feature Creep
**Risk:** Trying to build all features at once
**Mitigation:**
- Focus on fight predictor as primary MVP feature
- Use feature flags for gradual rollout
- Gather user feedback before building advanced features

### 2. Over-engineering
**Risk:** Building unnecessary infrastructure early
**Mitigation:**
- Start with monolithic architecture
- Use managed services (Supabase, Vercel)
- Implement caching only after identifying bottlenecks

## Resource Constraints

### 1. Data Collection Time
**Risk:** Historical data scraping takes weeks
**Mitigation:**
- Start with recent fights (last 2 years)
- Parallelize scraping with multiple workers
- Prioritize high-profile fights first

### 2. ML Training Costs
**Risk:** Model training becomes expensive
**Mitigation:**
- Use incremental learning where possible
- Train models locally during development
- Implement training schedules during off-peak hours

# Appendix  

## Research Findings
- UFC has ~6,000 historical fights with detailed statistics
- Average user session involves 3-5 predictions
- Peak traffic during fight nights (Saturday evenings)
- Mobile usage accounts for 60% of traffic

## Technical Specifications

### API Rate Limits
- 100 requests per minute per IP
- 1000 predictions per day per session
- Batch predictions limited to 10 fights

### Model Performance Targets
- Prediction accuracy: >65% for win/loss
- Method prediction accuracy: >45% for three classes
- API response time: <200ms for predictions
- Frontend load time: <3 seconds on 3G

### Database Specifications
- Expected data volume: ~500MB initial, growing 10MB/month
- Read/write ratio: 100:1
- Peak concurrent users: 1000
- Query response time target: <50ms

### Browser Support
- Chrome 90+, Firefox 88+, Safari 14+, Edge 90+
- Mobile: iOS 14+, Android 10+
- Responsive breakpoints: 320px, 768px, 1024px, 1440px
</PRD>